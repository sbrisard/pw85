<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="pw85_8hpp" kind="file" language="C++">
    <compoundname>pw85.hpp</compoundname>
    <includes local="no">boost/math/tools/minima.hpp</includes>
    <includes local="no">cmath</includes>
    <includes local="no">string_view</includes>
    <incdepgraph>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="1">
        <label>C:/Users/sbrisard/Git/programmes/pw85/include/pw85/pw85.hpp</label>
        <link refid="pw85_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>boost/math/tools/minima.hpp</label>
      </node>
      <node id="4">
        <label>string_view</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacepw85">pw85</innernamespace>
    <innernamespace refid="namespacepw85_1_1metadata">pw85::metadata</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/math/tools/minima.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pw85<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">metadata<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal">constexpr<sp/>std::string_view<sp/>author{</highlight><highlight class="stringliteral">&quot;S.<sp/>Brisard&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">constexpr<sp/>std::string_view<sp/>description{</highlight><highlight class="stringliteral">&quot;Implementation<sp/>of<sp/>the<sp/>\&quot;contact<sp/>function\&quot;<sp/>defined<sp/>by<sp/>Perram<sp/>and<sp/>Wertheim<sp/>(J.<sp/>Comp.<sp/>Phys.<sp/>58(3),<sp/>409-416,<sp/>DOI:10.1016/0021-9991(85)90171-8)<sp/>for<sp/>two<sp/>ellipsoids.&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">constexpr<sp/>std::string_view<sp/>author_email{</highlight><highlight class="stringliteral">&quot;sebastien.brisard@univ-eiffel.fr&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="15"><highlight class="normal">constexpr<sp/>std::string_view<sp/>license{</highlight><highlight class="stringliteral">&quot;BSD<sp/>3-Clause<sp/>License&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="16"><highlight class="normal">constexpr<sp/>std::string_view<sp/>name{</highlight><highlight class="stringliteral">&quot;pw85&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="17"><highlight class="normal">constexpr<sp/>std::string_view<sp/>url{</highlight><highlight class="stringliteral">&quot;https://github.com/sbrisard/pw85&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="18"><highlight class="normal">constexpr<sp/>std::string_view<sp/>version{</highlight><highlight class="stringliteral">&quot;2.0&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="19"><highlight class="normal">constexpr<sp/>std::string_view<sp/>year{</highlight><highlight class="stringliteral">&quot;2021&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="pw85_8hpp_1adbc1ca07399ce169c63d6b3270709d61" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1adbc1ca07399ce169c63d6b3270709d61" kindref="member">dim</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" kindref="member">sym</ref><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>For<sp/>the<sp/>Brent<sp/>algorithm,<sp/>these<sp/>two<sp/>constants<sp/>should<sp/>be<sp/>such<sp/>that</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>[(3<sp/>-<sp/>sqrt(5))<sp/>/<sp/>2]<sp/>**<sp/>n<sp/>&lt;<sp/>eps</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>where</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>max_iter</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>eps<sp/>=<sp/>lambda_atol</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="pw85_8hpp_1a713835b4ea9d8f80c4696f58fe95511d" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1a713835b4ea9d8f80c4696f58fe95511d" kindref="member">lambda_atol</ref><sp/>=<sp/>1e-6;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="pw85_8hpp_1ad96843772a8685a4eabfd4fb4c2cbf50" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1ad96843772a8685a4eabfd4fb4c2cbf50" kindref="member">max_iter</ref><sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="pw85_8hpp_1aceaec09317678cef301ba3f1f8061eb0" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1aceaec09317678cef301ba3f1f8061eb0" kindref="member">nr_iter</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="pw85_8hpp_1af10144a1ddcc02c51c67040bae4f0db1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1af10144a1ddcc02c51c67040bae4f0db1" kindref="member">_cholesky_decomp</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*l)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>l[0]<sp/>=<sp/>sqrt(a[0]);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>l[1]<sp/>=<sp/>a[1]<sp/>/<sp/>l[0];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>l[2]<sp/>=<sp/>a[2]<sp/>/<sp/>l[0];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>l[3]<sp/>=<sp/>sqrt(a[3]<sp/>-<sp/>l[1]<sp/>*<sp/>l[1]);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>l[4]<sp/>=<sp/>(a[4]<sp/>-<sp/>l[1]<sp/>*<sp/>l[2])<sp/>/<sp/>l[3];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>l[5]<sp/>=<sp/>sqrt(a[5]<sp/>-<sp/>l[2]<sp/>*<sp/>l[2]<sp/>-<sp/>l[4]<sp/>*<sp/>l[4]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="pw85_8hpp_1a66fa95248c023de2ed278e1a9626399f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1a66fa95248c023de2ed278e1a9626399f" kindref="member">_cholesky_solve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solve<sp/>L.y<sp/>=<sp/>b<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>y0<sp/>=<sp/>b[0]<sp/>/<sp/>l[0];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/>(b[1]<sp/>-<sp/>l[1]<sp/>*<sp/>y0)<sp/>/<sp/>l[3];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>y2<sp/>=<sp/>(b[2]<sp/>-<sp/>l[2]<sp/>*<sp/>y0<sp/>-<sp/>l[4]<sp/>*<sp/>y1)<sp/>/<sp/>l[5];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solve<sp/>L^T.x<sp/>=<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>x[2]<sp/>=<sp/>y2<sp/>/<sp/>l[5];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>x[1]<sp/>=<sp/>(y1<sp/>-<sp/>l[4]<sp/>*<sp/>x[2])<sp/>/<sp/>l[3];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>x[0]<sp/>=<sp/>(y0<sp/>-<sp/>l[1]<sp/>*<sp/>x[1]<sp/>-<sp/>l[2]<sp/>*<sp/>x[2])<sp/>/<sp/>l[0];</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="pw85_8hpp_1aa286d2d6e355fb7b5be2fa3c15af8f3c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1aa286d2d6e355fb7b5be2fa3c15af8f3c" kindref="member">spheroid</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a2<sp/>=<sp/>a<sp/>*<sp/>a;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>c2_minus_a2<sp/>=<sp/>c<sp/>*<sp/>c<sp/>-<sp/>a2;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nx<sp/>=<sp/>n[0];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ny<sp/>=<sp/>n[1];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nz<sp/>=<sp/>n[2];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>q[0]<sp/>=<sp/>nx<sp/>*<sp/>nx<sp/>*<sp/>c2_minus_a2<sp/>+<sp/>a2;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>q[3]<sp/>=<sp/>ny<sp/>*<sp/>ny<sp/>*<sp/>c2_minus_a2<sp/>+<sp/>a2;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>q[5]<sp/>=<sp/>nz<sp/>*<sp/>nz<sp/>*<sp/>c2_minus_a2<sp/>+<sp/>a2;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>q[4]<sp/>=<sp/>ny<sp/>*<sp/>nz<sp/>*<sp/>c2_minus_a2;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>q[2]<sp/>=<sp/>nx<sp/>*<sp/>nz<sp/>*<sp/>c2_minus_a2;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>q[1]<sp/>=<sp/>nx<sp/>*<sp/>ny<sp/>*<sp/>c2_minus_a2;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="pw85_8hpp_1a800dd17004d57d580bca78149c731f2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1a800dd17004d57d580bca78149c731f2a" kindref="member">f_neg</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r12,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q1,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q2)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*q1_i<sp/>=<sp/>q1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*q2_i<sp/>=<sp/>q2;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q[<ref refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" kindref="member">sym</ref>];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q_i<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q12[<ref refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" kindref="member">sym</ref>];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q12_i<sp/>=<sp/>q12;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" kindref="member">sym</ref>;<sp/>i++,<sp/>q1_i++,<sp/>q2_i++,<sp/>q_i++,<sp/>q12_i++)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>*q_i<sp/>=<sp/>(1<sp/>-<sp/>lambda)<sp/>*<sp/>(*q1_i)<sp/>+<sp/>lambda<sp/>*<sp/>(*q2_i);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>*q12_i<sp/>=<sp/>(*q2_i)<sp/>-<sp/>(*q1_i);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l[<ref refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" kindref="member">sym</ref>];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="pw85_8hpp_1af10144a1ddcc02c51c67040bae4f0db1" kindref="member">_cholesky_decomp</ref>(q,<sp/>l);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s[<ref refid="pw85_8hpp_1adbc1ca07399ce169c63d6b3270709d61" kindref="member">dim</ref>];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="pw85_8hpp_1a66fa95248c023de2ed278e1a9626399f" kindref="member">_cholesky_solve</ref>(l,<sp/>r12,<sp/>s);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*r_i<sp/>=<sp/>r12;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*s_i<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rs<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pw85_8hpp_1adbc1ca07399ce169c63d6b3270709d61" kindref="member">dim</ref>;<sp/>i++,<sp/>r_i++,<sp/>s_i++)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>rs<sp/>+=<sp/>(*r_i)<sp/>*<sp/>(*s_i);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-lambda<sp/>*<sp/>(1.<sp/>-<sp/>lambda)<sp/>*<sp/>rs;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="pw85_8hpp_1ac962f4ad307bb407e7475f4c27b08de0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1ac962f4ad307bb407e7475f4c27b08de0" kindref="member">_residual</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r12,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q1,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q[<ref refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" kindref="member">sym</ref>];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q12[<ref refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" kindref="member">sym</ref>];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" kindref="member">sym</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>q[i]<sp/>=<sp/>(1.<sp/>-<sp/>lambda)<sp/>*<sp/>q1[i]<sp/>+<sp/>lambda<sp/>*<sp/>q2[i];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>q12[i]<sp/>=<sp/>q2[i]<sp/>-<sp/>q1[i];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l[<ref refid="pw85_8hpp_1afb9f9a7ecf33323741c53e4a1b293823" kindref="member">sym</ref>];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><ref refid="pw85_8hpp_1af10144a1ddcc02c51c67040bae4f0db1" kindref="member">_cholesky_decomp</ref>(q,<sp/>l);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s[<ref refid="pw85_8hpp_1adbc1ca07399ce169c63d6b3270709d61" kindref="member">dim</ref>];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="pw85_8hpp_1a66fa95248c023de2ed278e1a9626399f" kindref="member">_cholesky_solve</ref>(l,<sp/>r12,<sp/>s);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>u[]<sp/>=<sp/>{q12[0]<sp/>*<sp/>s[0]<sp/>+<sp/>q12[1]<sp/>*<sp/>s[1]<sp/>+<sp/>q12[2]<sp/>*<sp/>s[2],</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q12[1]<sp/>*<sp/>s[0]<sp/>+<sp/>q12[3]<sp/>*<sp/>s[1]<sp/>+<sp/>q12[4]<sp/>*<sp/>s[2],</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q12[2]<sp/>*<sp/>s[0]<sp/>+<sp/>q12[4]<sp/>*<sp/>s[1]<sp/>+<sp/>q12[5]<sp/>*<sp/>s[2]};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v[<ref refid="pw85_8hpp_1adbc1ca07399ce169c63d6b3270709d61" kindref="member">dim</ref>];</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="pw85_8hpp_1a66fa95248c023de2ed278e1a9626399f" kindref="member">_cholesky_solve</ref>(l,<sp/>u,<sp/>v);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rs<sp/>=<sp/>r12[0]<sp/>*<sp/>s[0]<sp/>+<sp/>r12[1]<sp/>*<sp/>s[1]<sp/>+<sp/>r12[2]<sp/>*<sp/>s[2];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>su<sp/>=<sp/>s[0]<sp/>*<sp/>u[0]<sp/>+<sp/>s[1]<sp/>*<sp/>u[1]<sp/>+<sp/>s[2]<sp/>*<sp/>u[2];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uv<sp/>=<sp/>u[0]<sp/>*<sp/>v[0]<sp/>+<sp/>u[1]<sp/>*<sp/>v[1]<sp/>+<sp/>u[2]<sp/>*<sp/>v[2];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>out[0]<sp/>=<sp/>lambda<sp/>*<sp/>(1.<sp/>-<sp/>lambda)<sp/>*<sp/>rs;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>out[1]<sp/>=<sp/>(2<sp/>*<sp/>lambda<sp/>-<sp/>1.)<sp/>*<sp/>rs<sp/>+<sp/>lambda<sp/>*<sp/>(1.<sp/>-<sp/>lambda)<sp/>*<sp/>su;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>out[2]<sp/>=</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>*<sp/>rs<sp/>+<sp/>2.<sp/>*<sp/>(1.<sp/>-<sp/>2.<sp/>*<sp/>lambda)<sp/>*<sp/>su<sp/>-<sp/>2.<sp/>*<sp/>lambda<sp/>*<sp/>(1.<sp/>-<sp/>lambda)<sp/>*<sp/>uv;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="pw85_8hpp_1aa55fb187a8ad5da0e7cf3b4600ac42e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1aa55fb187a8ad5da0e7cf3b4600ac42e6" kindref="member">contact_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r12,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*q2,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>[r12,<sp/>q1,<sp/>q2](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pw85_8hpp_1a800dd17004d57d580bca78149c731f2a" kindref="member">f_neg</ref>(lambda,<sp/>r12,<sp/>q1,<sp/>q2);<sp/>};</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>boost::math::tools::brent_find_minima(</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f,<sp/>0.,<sp/>1.,<sp/>std::numeric_limits&lt;double&gt;::digits<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda_brent<sp/>=<sp/>r.first;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mu2_brent<sp/>=<sp/>-r.second;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out_res[3];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="pw85_8hpp_1ac962f4ad307bb407e7475f4c27b08de0" kindref="member">_residual</ref>(lambda_brent,<sp/>r12,<sp/>q1,<sp/>q2,<sp/>out_res);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res_brent<sp/>=<sp/>fabs(out_res[1]);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>refine<sp/>the<sp/>estimate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_nr<sp/>=<sp/>lambda_brent;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu2_nr<sp/>=<sp/>mu2_brent;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res_nr<sp/>=<sp/>res_brent;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pw85_8hpp_1aceaec09317678cef301ba3f1f8061eb0" kindref="member">nr_iter</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_trial<sp/>=<sp/>lambda_nr<sp/>-<sp/>out_res[1]<sp/>/<sp/>out_res[2];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((lambda_trial<sp/>&lt;<sp/>0.)<sp/>||<sp/>(lambda_trial<sp/>&gt;<sp/>1.))<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pw85_8hpp_1ac962f4ad307bb407e7475f4c27b08de0" kindref="member">_residual</ref>(lambda_trial,<sp/>r12,<sp/>q1,<sp/>q2,<sp/>out_res);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>lambda_nr<sp/>=<sp/>lambda_trial;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>mu2_nr<sp/>=<sp/>out_res[0];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>res_nr<sp/>=<sp/>fabs(out_res[1]);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res_nr<sp/>&lt;<sp/>res_brent)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>mu2_nr;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>lambda_nr;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>mu2_brent;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>lambda_brent;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>return<sp/>error<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pw85</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/sbrisard/Git/programmes/pw85/include/pw85/pw85.hpp"/>
  </compounddef>
</doxygen>
